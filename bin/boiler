#!/usr/bin/env python

import argparse

from ordered_set import OrderedSet

from xmlboiler.core.alg.download import NoDownloader, DepthFirstDownloader, BreadthFirstDownloader
from xmlboiler.core.options import TransformationAutomaticWorkflowElementOptions, RecursiveRetrievalPriorityOrderElement

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                 description="""Automatically process XML.\n
To support this project:
- Send money to PayPal porton@narod.ru or https://paypal.me/victorporton
- Send Ether to 0x36A0356d43EE4168ED24EFA1CAe3198708667ac0
- Buy tokens at https://crypto4ngo.org/project/view/4""")
subparsers = parser.add_subparsers(title='subcommands')

parser.add_argument('-p', '--preload', help='preload asset', action='append', metavar='NAMESPACE')
parser.add_argument('-r', '--recursive', help='recursive download mode (none, breadth-first, depth-first)',
                    choices=['none', 'breadth', 'depth'])
parser.add_argument('-x', '--recursive-order', metavar='ORDER',
                    help='recursive download order (comma separated "sources", "targets", "workflowtargets")')
parser.add_argument('-d', '--downloaders', metavar='DOWNLOADERS',
                    help='a plus-separated list of comma-separated lists of "builtin","ns"')

chain_parser = subparsers.add_parser('chain', aliases=['c'], help='Automatically run a chain of transformations')
chain_parser.set_defaults(options_object=TransformationAutomaticWorkflowElementOptions)
chain_parser.add_argument('source', nargs='?', help='source document (defaults to stdin)')
chain_parser.add_argument('-o', '--output', nargs=1, help='output file (defaults to stdout)')
chain_parser.add_argument('-t', '--target', help='target namespace(s)', action='append', metavar='NAMESPACE')
chain_parser.add_argument('-n', '--not-in-target', help='what if a result is not in target NS',
                          choices=['ignore', 'remove', 'error'])
chain_parser.add_argument('-u', '--universal-precedence', help='universal precedence', metavar='URL')

try:
    args = parser.parse_args()
except TypeError:
    parser.print_usage()
    exit(1)

options = args.options_object()

options.recursive_options.initial_assets = OrderedSet([] if args.preload is None else args.preload)

options.recursive_options.download_algorithm = \
    {'none': NoDownloader, 'breadth': BreadthFirstDownloader, 'depth': DepthFirstDownloader}[args.recursive or 'breadth']

if args.recursive_order is not None:
    elts = args.recursive_order.split(',')
    elts2 = frozenset(elts)
    if not elts2.issubset(["sources", "targets", "workflowtargets"]):
        print("Error: --recursive-order can be only: sources, targets, workflowtargets.")
        exit(1)
    if len(elts2) != len(elts):
        print("Error: values are repeated more than once in --recursive-order option.")
        exit(1)
    map = {"sources": RecursiveRetrievalPriorityOrderElement.SOURCES,
           "targets": RecursiveRetrievalPriorityOrderElement.TARGETS,
           "workflowtargets": RecursiveRetrievalPriorityOrderElement.WORKFLOW_TARGETS}
    options.recursive_options.retrieval_priority = OrderedSet([map[s] for s in elts])
else:
    # TODO: Subject to change
    options.recursive_options.retrieval_priority = \
        OrderedSet([RecursiveRetrievalPriorityOrderElement.WORKFLOW_TARGETS,
                    RecursiveRetrievalPriorityOrderElement.TARGETS,
                    RecursiveRetrievalPriorityOrderElement.SOURCES])

# FIXME: don't execute commands from remote scripts (without not yet working jail)
#        (So downloading from URLs does not make sense yet)

# TODO