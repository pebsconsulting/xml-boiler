#!/usr/bin/env python

import argparse

# from xmlboiler.core.options import TransformationAutomaticWorkflowElementOptions

parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                 description="""Automatically process XML.\n
To support this project:
- Send money to PayPal porton@narod.ru
- Send Ether to 0x36A0356d43EE4168ED24EFA1CAe3198708667ac0
- Buy tokens at https://crypto4ngo.org/project/view/4""")
subparsers = parser.add_subparsers(title='subcommands')

parser.add_argument('-p', '--preload', help='preload asset', action='append', metavar='NAMESPACE')
parser.add_argument('-r', '--recursive', help='recursive download mode (none, breadth-first, depth-first)',
                    choices=['none', 'breadth', 'depth'])
parser.add_argument('-x', '--recursive-order', metavar='ORDER',
                    help='recursive download order (comma separated "sources", "targets", "workflowtargets")')
parser.add_argument('-d', '--downloaders', metavar='DOWNLOADERS',
                    help='a plus-separated list of comma-separated lists of "builtin","ns"')

chain_parser = subparsers.add_parser('chain', aliases=['c'], help='Automatically run a chain of transformations')
chain_parser.add_argument('source', nargs='?', help='source document (defaults to stdin)')
chain_parser.add_argument('-o', '--output', nargs=1, help='output file (defaults to stdout)')
chain_parser.add_argument('-t', '--target', help='target namespace(s)', action='append', metavar='NAMESPACE')
chain_parser.add_argument('-n', '--not-in-target', help='what if a result is not in target NS',
                          choices=['ignore', 'remove', 'error'])
chain_parser.add_argument('-u', '--universal-precedence', help='universal precedence', metavar='URL')

try:
    args = parser.parse_args()
except TypeError:
    parser.print_usage()
    exit()

# options = TransformationAutomaticWorkflowElementOptions()

